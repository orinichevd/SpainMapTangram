cameras:
    camera1:
        type: perspective

lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .3
        ambient: 1

sources:
    nextzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: NaqqS33fTUmyQcvbuIUCKA
        tile_size: 512
        max_zoom: 16
    elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/256/terrarium/{z}/{x}/{y}.png
        url_params:
            api_key: U8ram8vrRzGOqacGos1BFw
        max_zoom: 16
    path_olot_girona:
        type: GeoJSON
        url: http://localhost:8080/assets/path1.geojson
    path_girona_sanfelio:
        type: GeoJSON
        url: http://localhost:8080/assets/path2.geojson

styles:
    hillshade:
        base: raster
        animated: true
        lighting: false
        texcoords: true
        shaders:
            blocks:
                global: |
                    float unpack(vec4 h) {
                        // GPU reads each 0-255 channel as range 0-1, right where we want it
                        // assemble to get height
                        return (h.r * 1. + h.g / 256. + h.b / 65536.);
                    }
                color: |
                    // Normal from heightmap
                    // adapted from
                    // http://stackoverflow.com/questions/5281261/generating-a-normal-map-from-a-height-map
                    // http://stackoverflow.com/questions/15178225/normal-map-from-height-map-artifact
                    float px = 1.;
                    vec3 off = vec3(-px, 0, px);
                    float h = unpack(color);
                    // Sample heightmap at center, left, right, above, below
                    float h01 = unpack(sampleRasterAtPixel(0, vec2(currentRasterPixel(0) + off.xy)));
                    float h21 = unpack(sampleRasterAtPixel(0, vec2(currentRasterPixel(0) + off.zy)));
                    float h10 = unpack(sampleRasterAtPixel(0, vec2(currentRasterPixel(0) + off.yx)));
                    float h12 = unpack(sampleRasterAtPixel(0, vec2(currentRasterPixel(0) + off.yz)));
                    // left/right + up/down kernel (softer)
                    vec3 va = normalize(vec3(off.xy/-2./rasterPixelSize(0),h21-h01));
                    vec3 vb = normalize(vec3(off.yx/-2./rasterPixelSize(0),h12-h10));
                    normal = normalize(cross(va, vb));
                    // adjust width of line based on normals to produce thinner line on flatter surfaces
                    float adj = (1. / normal.z) * 1. - .9999;
                    float w = 1.5 * adj * (1.5 - fract(u_map_position.z));
                    float val = fract(h  * (250. * (1. + fract(u_time * .001))));
                    float triangle = abs(1. * val - 1.0);
                    float square = smoothstep(.0, w, triangle);
                    square *= smoothstep(w, w+w, val);
                    color.rgb = vec3(square);
                    val = fract(h  * (1000. * (1. + fract(u_time * .001))));
                    triangle = abs(1. * val - 1.0);
                    square = smoothstep(.0, w, triangle);
                    square *= smoothstep(w, w+w, val);
                    color.rgb *= vec3(square);


layers:
    terrain:
        data: { source: elevation, layer: _default }
        draw:
            hillshade:
                order: 99

    earth:
        data: { source: nextzen }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: '#ddeeee'

    #landuse:
    #    data: { source: nextzen }
    #    draw:
    #        polygons:
    #            order: function() { return feature.sort_rank; }
    #            color: '#aaffaa'

    water:
        data: { source: nextzen }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: '#3030ff'

    roads:
        data: { source: nextzen }
        filter:
            not: { kind: [path, rail, ferry] }
        draw:
            lines:
                order: function() { return feature.sort_rank; }
                color: gray
                width: 8
                cap: round
        highway:
            filter:
                kind: highway
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: '#000066'
                    width: 12
                    outline:
                        color: grey
                        width: 1.5
        minor_road:
            filter:
                kind: minor_road
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: lightgrey
                    width: 5
    path1:
        data: 
            source: path_olot_girona
        draw: 
            lines:
                order: 100
                color: '#FF0000'
                width: [[7, .5px], [9, 1px], [14, 5px]]

    path2:
        data:
            source: path_girona_sanfelio
        draw:
            lines:
                order: 100
                color: '#FF0000'
                width: [[7, .5px], [9, 1px], [14, 5px]]

    buildings:
        data: { source: nextzen }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: |
                    function () {
                        var h = feature.height || 20;
                        h = Math.min((h + 50)/ 255, .8); // max brightness: .8
                        h = Math.max(h, .4); // min brightness: .4
                        return [h, h, h];
                    }
        #3d-buildings:
        #    filter: { $zoom: { min: 5 } }
        #    draw:
        #        polygons:
        #            extrude: function () { return feature.height > 20 || $zoom >= 16; }